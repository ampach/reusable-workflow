# This is a basic workflow to help you get started with Actions

name: build

# Controls when the workflow will run
on: 
  push:
    branches: ["main"]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: 
      contents: write
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get current date
        id: date
        run: echo "date=$(date +'%Y%m%d-%H%M')" >> $GITHUB_OUTPUT
      
      - name: Get build tag
        id: build_tag
        run: |
          echo "build_tag=$BUILD_DATE" >> $GITHUB_OUTPUT
        env:
          BUILD_DATE: ${{ steps.date.outputs.date }}
          
      - name: Taking the Latest Release Tag number
        id: releaseVersion
        run: |
          owner="ampach"
          repo="${{ github.event.repository.name }}"
          release_json=$(curl https://api.github.com/repos/$owner/$repo/releases)
          Release_tag=$(echo "$release_json" | jq -r '.[0].tag_name')
          echo "Release_tag: Latest Tag is : $Release_tag"
          echo "Release_tag=$Release_tag" >> $GITHUB_OUTPUT        
            
      - name: Bumping release version 
        id: bump_release_version
        shell: pwsh
        run: |
          $version = New-Object System.Version(${{ steps.releaseVersion.outputs.Release_tag }})
          $newVersion = ""
          
          $comment = "${{ github.event.head_commit.message }}"
          
          if ($comment -contains "major") { 
            $newVersion = "{0}.{1}.{2}" -f ($version.Major + 1), 0, 0
          } elseif ($comment -contains "minor") {
            $newVersion = "{0}.{1}.{2}" -f $version.Major, ($version.Minor + 1), 0
          } else {
            write-host $version.Major
            write-host $version.Minor
            write-host $version.Build
            $newVersion = "{0}.{1}.{2}" -f $version.Major, $version.Minor, ($version.Build + 1)
          }          
          "new_release_tag=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          
      
      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
        
      # Runs a single command using the runners shell
      - name: New Version
        run: echo ${{ steps.bump_release_version.outputs.new_release_tag }}
          
#      - name: Create Release
#        id: create_release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
#        with:
#          tag_name: v.1.0.0
#          release_name: Release v.1.0.0
#          body: |
#            Changes in this Release
#            - First Change
#            - Second Change
#          prerelease: false
      
          
    outputs:
      build_tag: ${{ steps.build_tag.outputs.build_tag }}
          
#  deploy-dev:
#    uses: ./.github/workflows/deploy.yml
#    needs: [build]
#    secrets:
#      DEMO_HOST: ${{ secrets.DEMO_HOST }}
#      envPAT: ${{ secrets.envPAT }}
#    concurrency: release
#    with:
#      environment: dev
#      config-path: ${{needs.build.outputs.build_tag}}
      
#  deploy-test:
#    uses: ./.github/workflows/deploy.yml
#    needs: [build, deploy-dev]
#    secrets:
#      DEMO_HOST: ${{ secrets.DEMO_HOST }}
#      envPAT: ${{ secrets.envPAT }}
#    concurrency: release
#    with:
#      environment: test
#      config-path: ${{needs.build.outputs.build_tag}}
  
