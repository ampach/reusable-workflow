# This is a basic workflow to help you get started with Actions

name: _create-release

# Controls when the workflow will run
on:
  workflow_call: 
    inputs:
      pre_release:
        required: true
        type: boolean
        default: false
    secrets:
      AUTOMATION_PAT:
        required: true        
    outputs:
      build_tag:
        description: "The new release version"
        value: ${{ jobs.create-release.outputs.build_tag }}

# A workflow run is made up of one or more jobs that can run sequentially or in parallel

jobs:
  # This workflow contains a single job called  "build"
  create-release:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    permissions: 
      contents: write
    
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

      - name: Taking the Latest Release Tag number
        id: releaseVersion
        run: |
          owner="${{ github.repository_owner }}"
          repo="${{ github.event.repository.name }}"
          owner="${{ github.repository_owner }}"
          repo="${{ github.event.repository.name }}"
          release_json=$(gh api -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" /repos/$owner/$repo/releases/latest)        
          
          echo "Release_tag: Latest Tag is : $release_json.tag_name"
          echo "Release_tag=$release_json.tag_name" >> $GITHUB_OUTPUT
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
      - name: Bumping release version 
        id: bump_release_version
        shell: pwsh
        run: |
          $version = New-Object System.Version("${{ steps.releaseVersion.outputs.Release_tag }}")
          $newVersion = ""
          
          $comment = "${{ github.event.head_commit.message }}"
          
          write-host $comment
          write-host ($comment -contains "major")
          
          if ($comment -match "major") { 
            $newVersion = "{0}.{1}.{2}" -f ($version.Major + 1), 0, 0
          } elseif ($comment -match "minor") {
            $newVersion = "{0}.{1}.{2}" -f $version.Major, ($version.Minor + 1), 0
          } else {
            $newVersion = "{0}.{1}.{2}" -f $version.Major, $version.Minor, ($version.Build + 1)
          }          
          "new_release_tag=$newVersion" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
          write-host "The new release version is $newVersion"
              
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.AUTOMATION_PAT }}
        with:
          tag_name: ${{ steps.bump_release_version.outputs.new_release_tag }}
          release_name: Release v.${{ steps.bump_release_version.outputs.new_release_tag }}
          body: |
            ${{ github.event.head_commit.message }}
          prerelease: ${{ inputs.pre_release }}
      
          
    outputs:
      build_tag: ${{ steps.bump_release_version.outputs.new_release_tag }}
